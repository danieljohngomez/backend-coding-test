openapi: 3.0.1
info:
  title: XendIt Backend Coding Test
  description: 'This is a backend coding test for XendIt. It serves a ride API that allows you to place a ride and its route.'
  contact:
    email: djgomez23@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:8010
tags:
  - name: rides
    description: Manage rides
  - name: info
    description: Retrieve information about the server
paths:
  /rides:
    get:
      tags:
        - rides
      summary: Get rides
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaginatedRideEntities'
              examples:
                objectExample:
                  $ref: '#/components/examples/PaginatedRideEntities'
        400:
          description: Invalid request parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
              examples:
                objectExample:
                  $ref: '#/components/examples/ValidationPaginationError'
      parameters:
        - name: limit
          in: query
          description: "Maximum number of rides to return. Must be >= 0. To return all rides, use 0."
          schema:
            type: integer
            default: 20
        - name: page
          in: query
          description: "The page of results to return. Must be > 0."
          schema:
            type: integer
            default: 1
    post:
      tags:
        - rides
      summary: Adds a ride
      requestBody:
        description: The ride object to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ride'
            examples:
              objectExample:
                $ref: '#/components/examples/Ride'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RideEntity'
              examples:
                objectExample:
                  $ref: '#/components/examples/RideEntity'
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                objectExample:
                  $ref: '#/components/examples/ValidationRideError'
                  
  /rides/{id}:
    get:
      tags:
        - rides
      summary: Find a ride by ID
      parameters:
        - name: id
          in: path
          description: ID of the ride
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RideEntity'
              examples:
                objectExample:
                  $ref: '#/components/examples/RideEntity'
        404:
          description: Ride not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                objectExample:
                  $ref: '#/components/examples/RideNotFoundError'
  /health:
    get:
      tags:
        - info
      summary: Returns the health of the server
      responses:
        200:
          description: Successful operation
          content:
            text/html; charset=utf-8:
              schema:
                type: string
                example: Healthy
components:
  schemas:
    Ride:
      type: object
      properties:
        startLat:
          type: number
          description: Starting latitude, must be between -90 - 90
        startLong:
          type: number
          description: Starting longitude, must be between -180 to 180 degrees
        endLat:
          type: number
          description: End latitude must, be between -90 - 90
        endLong:
          type: number
          description: End longitude, must be between -180 to 180 degrees
        rider_name:
          type: string
          description: Name of the rider, not empty
        driver_name:
          type: string
          description: Name of the driver, not empty
        driver_vehicle:
          type: string
          description: Vehicle of the driver, not empty
    RideEntity:
      type: object
      properties:
        rideID:
          type: integer
          description: ID of the ride
        startLat:
          type: number
          description: Starting latitude
        startLong:
          type: number
          description: Starting longitude
        endLat:
          type: number
          description: End latitude
        endLong:
          type: number
          description: End longitude
        riderName:
          type: string
          description: Name of the rider
        driverName:
          type: string
          description: Name of the driver
        driverVehicle:
          type: string
          description: Vehicle of the driver
        created:
          type: string
          description: Date of creation
    PaginatedRideEntities:
      type: object
      properties:
        totalResults:
          type: integer
          description: total count of the rides
        totalPages:
          type: number
          description: total count of pages
        page:
          type: number
          description: the current page
        limit:
          type: number
          description: maximum number of rides in each page
        data:
          type: array
          items:
            $ref: '#/components/schemas/RideEntity'
          description: list of rides
    Error:
      type: object
      properties:
        errorCode:
          type: string
          description: Error code
        messages:
          type: array
          items:
            type: string
          description: Error messages
  examples:
    Ride:
      value:
        startLat: 35.460670
        startLong: 26.450755
        endLat: 40.003424
        endLong: 51.553412
        riderName: 'John Doe'
        driverName: 'Jane Doe'
        driverVehicle : 'Sedan'
      summary: An example valid ride object
    RideEntity:
      value:
        rideID: 1
        startLat: 35.460670
        startLong: 26.450755
        endLat: 40.003424
        endLong: 51.553412
        riderName: 'John Doe'
        driverName: 'Jane Doe'
        driverVehicle : Sedan
        created: '2020-12-06 06:23:36'
      summary: An example ride entity object
    PaginatedRideEntities:
      value:
        totalResults: 1
        totalPages: 1
        page: 1
        limit: 20
        data: [ 
          { 
            rideID: 1,
            startLat: 35.460670,
            startLong: 26.450755,
            endLat: 40.003424,
            endLong: 51.553412,
            riderName: 'John Doe',
            driverName: 'Jane Doe',
            driverVehicle : Sedan,
            created: '2020-12-06 06:23:36' 
          }
        ]
      summary: An example paginated ride entities object
    ValidationRideError:
      value:
        errorCode: 'VALIDATION_ERROR'
        messages: ['Rider name must be a non empty string']
      summary: An error response when parameters are invalid
    ValidationPaginationError:
      value:
        errorCode: 'VALIDATION_ERROR'
        messages: ['Page must be greater than 0']
      summary: An error response when parameters are invalid
    RideNotFoundError:
      value:
        errorCode: 'RIDES_NOT_FOUND_ERROR'
        messages: ['Could not find any rides']
      summary: An error response when a ride is not found